1.TreeMap?????????????????
K key;					//??
V value;				//?
Entry<K,V> left;		//??????
Entry<K,V> right;		//??????
Entry<K,V> parent;		//?????
boolean color;			//???????




2.TreeMap?????????????????????
public class TreeMap<K,V>{
   
    //?????????
    private final Comparator<? super K> comparator;

	//?????
    private transient Entry<K,V> root;

	//????????
    private transient int size = 0;

   

3.??????
	//???????????????????????
	 public TreeMap() {
        comparator = null;
    }
	
	
	
4.???????
	//???????????????????????
	public TreeMap(Comparator<? super K> comparator) {
        this.comparator = comparator;
    }
	
	
5.???????
	public V put(K key, V value) {
        return put(key, value, true);
    }

?????????
?????????
???????????????????????????????
		true??????
		false????????
		
	private V put(K key, V value, boolean replaceOld) {
		//??????????????????????????t
        Entry<K,V> t = root;
		//???????????null
		//????null???????????????????????????????????????????
		//??????null?????????????????????????????????????????????
        if (t == null) {
			//???????????????Entry?????????????????
            addEntryToEmptyMap(key, value);
			//???????????????????
            return null;
        }
		//?????????????????????
        int cmp;
		//??????????????????
        Entry<K,V> parent;
		
		//?????????????
		//????????????????????????????comparator???????null??cpr????????null
		//????????????????????????????comparator??????????????
        Comparator<? super K> cpr = comparator;
		//?????????????????????
		//??????????????????????if????????????????????????
		//??????????????????????else??????????????????????????
        if (cpr != null) {
            do {
                parent = t;
                cmp = cpr.compare(key, t.key);
                if (cmp < 0)
                    t = t.left;
                else if (cmp > 0)
                    t = t.right;
                else {
                    V oldValue = t.value;
                    if (replaceOld || oldValue == null) {
                        t.value = value;
                    }
                    return oldValue;
                }
            } while (t != null);
        } else {
			//???????????????Comparable?????
			//?????????????Comparable???????????????????
			//???????????????????
            Comparable<? super K> k = (Comparable<? super K>) key;
            do {
				//???????????????????
                parent = t;
				//????compareTo?????????????????????????????
                cmp = k.compareTo(t.key);
				
                if (cmp < 0)
					//??????????????
					//?????????????????????
                    t = t.left;
                else if (cmp > 0)
					//??????????????
					//?????????????????????
                    t = t.right;
                else {
					//??????????0??????
                    V oldValue = t.value;
                    if (replaceOld || oldValue == null) {
                        t.value = value;
                    }
                    return oldValue;
                }
            } while (t != null);
        }
		//??????????????????????????
        addEntry(key, value, parent, cmp < 0);
        return null;
    }	
	
	
	
	 private void addEntry(K key, V value, Entry<K, V> parent, boolean addToLeft) {
        Entry<K,V> e = new Entry<>(key, value, parent);
        if (addToLeft)
            parent.left = e;
        else
            parent.right = e;
		//????????????????????????????????
        fixAfterInsertion(e);
        size++;
        modCount++;
    }
	
	
	
	private void fixAfterInsertion(Entry<K,V> x) {
		//??????????????????????
        x.color = RED;

		//???????????????
		
		//parentOf:???x??????
		//parentOf(parentOf(x)):???x???????
		//leftOf:?????????
        while (x != null && x != root && x.parent.color == RED) {
			
			
			//???????????????????????????????????
			//??????????????????????
            if (parentOf(x) == leftOf(parentOf(parentOf(x)))) {
				//????????????????????????????
				//?????????????rightOf??????????????????
                Entry<K,V> y = rightOf(parentOf(parentOf(x)));
                if (colorOf(y) == RED) {
					//???????????????????
					
					//??????????????
                    setColor(parentOf(x), BLACK);
					//????????????????
                    setColor(y, BLACK);
					//???????????????
                    setColor(parentOf(parentOf(x)), RED);
					
					//??????????????????
                    x = parentOf(parentOf(x));
                } else {
					
					//???????????????????
					
					
					//???????????????????????????
                    if (x == rightOf(parentOf(x))) {
						
						//??????????????????????
                        x = parentOf(x);
						//????
                        rotateLeft(x);
                    }
                    setColor(parentOf(x), BLACK);
                    setColor(parentOf(parentOf(x)), RED);
                    rotateRight(parentOf(parentOf(x)));
                }
            } else {
				//????????????????????????????
				//?????????????leftOf??????????????????
                Entry<K,V> y = leftOf(parentOf(parentOf(x)));
                if (colorOf(y) == RED) {
                    setColor(parentOf(x), BLACK);
                    setColor(y, BLACK);
                    setColor(parentOf(parentOf(x)), RED);
                    x = parentOf(parentOf(x));
                } else {
                    if (x == leftOf(parentOf(x))) {
                        x = parentOf(x);
                        rotateRight(x);
                    }
                    setColor(parentOf(x), BLACK);
                    setColor(parentOf(parentOf(x)), RED);
                    rotateLeft(parentOf(parentOf(x)));
                }
            }
        }
		
		//??????????????
        root.color = BLACK;
    }
	
	
	
	
	
	
	
6.???????????
6.1TreeMap??????????????????????hashCode??equals??????
???????????????


6.2HashMap???????????JDK8?????????????????????????
???????????HashMap????????????Compareable????????????????????
????????
?????HashMap????????????????????????????????????




6.3TreeMap??HashMap??????????
??????????????????8????????8???????????????????TreeMap??????????
??????????????????????????
???????????HashMap???????????



6.4???????Map???????java?????????????????????????put???????
???putIfAbsent???????????
??????????
	???????????????????????????????????????A??????????????????????????????????????????
	???????????????B??
	
	????
		boolean???????????????????AB???????boolean????????
		int?????????????????????????????int???????????
		



6.5????????????????????
	HashMap LinkedHashMap TreeMap
	
	????HashMap?????????
	??????????????LinkedHashMap
	????????????TreeMap
	
	

	
	
